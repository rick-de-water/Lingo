name: lingo
on: [push, pull_request]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        cxx-version: [11, 14, 17, 20]
        config: [Debug, Release]
        exclude:
          - os: ubuntu-latest
            cxx-version: 20
    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone
        uses: actions/checkout@v2
        with:
          path: "source"
      - run: mkdir build
      - name: Configure
        working-directory: ./build
        run: cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DLINGO_TEST_CXX_VERSION=${{ matrix.cxx-version }} -DLINGO_WARNINGS_AS_ERRORS=ON -DLINGO_SANITIZE=ON ../source
      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.config }}
      - name: Test
        working-directory: ./build
        run: ctest --build-config ${{ matrix.config }}
  coverage:
    runs-on: ubuntu-latest
    needs: test
    env:
      CC: /usr/bin/gcc-9
      CXX: /usr/bin/g++-9
    steps:
      - name: Install lcov
        run: |
          sudo apt install libperlio-gzip-perl libjson-perl
          wget "https://github.com/linux-test-project/lcov/archive/master.zip"
          unzip "master.zip"
          cd "lcov-master"
          sudo make install
      - name: Clone
        uses: actions/checkout@v2
      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=Debug -DLINGO_TEST_CXX_VERSION=20 -DLINGO_COVERAGE=ON
      - name: Build
        run: cmake --build . --config DEBUG
      - name: Test
        run: ctest --build-config Debug
      - name: Capture coverage info
        run: |
          lcov --directory . --capture --output-file coverage.info --gcov-tool /usr/bin/gcov-9
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --remove coverage.info '**/src/lib/catch/**' --output-file coverage.info
          lcov --remove coverage.info '**/tests/**' --output-file coverage.info
          lcov --list coverage.info
      - name: Upload coverage report to CodeCov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: Lingo
          file: coverage.info
          fail_ci_if_error: true
      - name: Upload coverage report to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage.info
